type Chat
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, update, delete] }
      { allow: private, operations: [read], provider: iam }
      {
        allow: public
        operations: [read]
        provider: iam
        conditions: [{ field: "access", eq: "public" }]
      }
    ]
  ) {
  id: ID!
  chatName: String
  owner: String
  messages: [Message] @connection(keyName: "byChat", fields: ["id"])
  access: AccessType @default(value: "private")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  onDelete: AWSLambda @function(name: "ChatTriggerLambda-${env}")
}

type Message
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, update, delete] }
      { allow: private, operations: [read], provider: iam }
      {
        allow: public
        operations: [read]
        provider: iam
        conditions: [{ field: "access", eq: "public" }]
      }
    ]
  )
  @key(name: "byChat", fields: ["chatID"]) {
  id: ID!
  chatID: ID!
  owner: String
  access: AccessType @default(value: "private")
  content: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  onDelete: AWSLambda @function(name: "MessageTriggerLambda-${env}")
}

type Model
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, update, delete] }
      { allow: private, operations: [read], provider: iam }
      {
        allow: public
        operations: [read]
        provider: iam
        conditions: [{ field: "access", eq: "public" }]
      }
    ]
  ) {
  id: ID!
  modelName: String
  owner: String
  access: AccessType @default(value: "private")
}

type Prompt
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, update, delete] }
      { allow: private, operations: [read], provider: iam }
      {
        allow: public
        operations: [read]
        provider: iam
        conditions: [{ field: "access", eq: "public" }]
      }
    ]
  ) {
  id: ID!
  promptName: String
  owner: String
  access: AccessType @default(value: "private")
}

type Plugin
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, update, delete] }
      { allow: private, operations: [read], provider: iam }
      {
        allow: public
        operations: [read]
        provider: iam
        conditions: [{ field: "access", eq: "public" }]
      }
    ]
  ) {
  id: ID!
  pluginName: String
  owner: String
  access: AccessType @default(value: "private")
}

enum AccessType {
  public
  private
}

enum AccessType {
  public
  private
}
